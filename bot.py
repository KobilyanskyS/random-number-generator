import random

# importing Aiogram
import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# importing the database management file
import database as db

# bot token
API_TOKEN = 'YOUR_TOKEN'

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# Keyboard for language selection
button_ru = KeyboardButton('üá∑üá∫ –†—É—Å—Å–∫–∏–π')
button_en = KeyboardButton('üá¨üáß English')
language_kb = ReplyKeyboardMarkup(resize_keyboard=True)
language_kb.add(button_ru,button_en)

# Set range of numbers from user in states
class numbersForm(StatesGroup):
    number_from = State()
    number_to = State()

# /start command
@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    db.set_user(message.from_user.id)
    await message.answer("Hi!\nI am a random number generator bot\nDefault number range: from 1 to 100\nMy commands:\n/language - Select a language.\n/range - Set your own range of numbers.\n/generate - Generate a number\n/reset - Sets the default range of numbers (from 1 to 100)\n\n–ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª\n–î–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –æ—Ç 1 –¥–æ 100\n–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n/language - –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫.\n/range - –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª.\n/generate - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∏—Å–ª–æ\n/reset - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–æ—Ç 1 –¥–æ 100)")

# /language command
@dp.message_handler(commands=['language'])
async def choose_language(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:\nChoose the language:", reply_markup=language_kb)

# /range command
@dp.message_handler(commands=['range'])
async def choose_range(message: types.Message):
    await numbersForm.number_from.set()
    if db.get_language(message.from_user.id) == 1:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ: ", reply_markup=types.ReplyKeyboardRemove())
    elif db.get_language(message.from_user.id) == 0:
        await message.answer("Set an initial number: ", reply_markup=types.ReplyKeyboardRemove())

# hadler for number_from
@dp.message_handler(lambda message: message.text.isdigit(), state=numbersForm.number_from)
async def process_number_from(message: types.Message, state: FSMContext):
    await numbersForm.next()
    await state.update_data(number_from=int(message.text))
    if db.get_language(message.from_user.id) == 1:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω–æ–µ —á–∏—Å–ª–æ: ")
    elif db.get_language(message.from_user.id) == 0:
        await message.answer("Set a finite number: ")

# hadler for number_to
@dp.message_handler(lambda message: message.text.isdigit(), state=numbersForm.number_to)
async def process_number_to(message: types.Message, state: FSMContext):
    await numbersForm.next()
    await state.update_data(number_to=int(message.text))
    async with state.proxy() as data:
        db.set_range(int(md.text(data['number_from'])), int(md.text(data['number_to'])), message.from_user.id)
        if db.get_language(message.from_user.id) == 1:
            await message.answer(md.text('–í–∞—à –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ', '–æ—Ç ', data['number_from'], ' –¥–æ ', data['number_to']))
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /generate, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ–Ω—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∏—Å–ª–æ")
        elif db.get_language(message.from_user.id) == 0:
            await message.answer(md.text('Your range of numbers is set: ', 'from ', data['number_from'], ' to ', data['number_to']))
            await message.answer("Enter the /generate command to generate a number")
        await state.finish()

# handler for Russian language
@dp.message_handler(Text(equals="üá∑üá∫ –†—É—Å—Å–∫–∏–π"))
async def russian_lg(message: types.Message):
    db.choose_language(1, message.from_user.id)
    await message.reply("–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π", reply_markup=types.ReplyKeyboardRemove())

# handler for English language
@dp.message_handler(Text(equals="üá¨üáß English"))
async def english_lg(message: types.Message):
    db.choose_language(0, message.from_user.id)
    await message.reply("Language switched to English", reply_markup=types.ReplyKeyboardRemove())

# /generate command
@dp.message_handler(commands=['generate'])
async def generate(message: types.Message):
    # get the initial and final numbers from the database.
    num_from = db.get_range(message.from_user.id)[0][0]
    num_to = db.get_range(message.from_user.id)[0][1] + 1
    # generate a number
    try:
        generated_number = random.randrange(num_from, num_to)
        if db.get_language(message.from_user.id) == 1:
            await message.answer("–í–∞—à–µ —á–∏—Å–ª–æ: " + str(generated_number))
        elif db.get_language(message.from_user.id) == 0:
            await message.answer("Your number: " + str(generated_number))
    except ValueError:
        if db.get_language(message.from_user.id) == 1:
            await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª\n–í–æ–∑–º–æ–∂–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /range, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å —á–∏—Å–ª–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω")
        elif db.get_language(message.from_user.id) == 0:
            await message.answer("You entered the wrong range of numbers\nPerhaps the initial number is greater than the final\nUse the /range command to set the numeric range")

# /reset command
@dp.message_handler(commands=['reset'])
async def reset_range(message: types.Message):
    db.set_user(message.from_user.id)
    db.reset(message.from_user.id)
    if db.get_language(message.from_user.id) == 1:
        await message.answer("–í–∞—à –¥–∏–∞–ø–∞–∑–æ–Ω —Å–±—Ä–æ—à–µ–Ω.\n–¢–µ–∫—É—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç 1 –¥–æ 100")
    elif db.get_language(message.from_user.id) == 0:
        await message.answer("Your range is reset.\nCurrent range: from 1 to 100")

# handler for other messages (not necessary)
@dp.message_handler()
async def echo(message: types.Message):
    if db.get_language(message.from_user.id) == 1:
        await message.reply("–Ø –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å ü•∫\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
    elif db.get_language(message.from_user.id) == 0:
        await message.reply("I do not know how to answer you ü•∫\nTo find out more information, enter the /start command")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)